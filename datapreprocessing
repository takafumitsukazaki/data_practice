-------------------------------------------------------------------------
pd.read_csv('Data.csv') 
-------------------------------------------------------------------------
#csvファイルをimport
-------------------------------------------------------------------------
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values
-------------------------------------------------------------------------
#iloc
#pandasのメソッド
#.valuesによって値変数に変換
#numpyによって変換

#classとは、私たちがこれから構築していきたい何らかのモデルのことを示します。具体例としては、私たちが家を建てたいと考えているのであれば、家を建てるための方法についてまとめられたものがclassとなります。
#objectとは、classから作成されたinstanceのことを言います。前の家の例で考えていくと、objectは家そのものと言うことができます。つまり、家（objecty）は家の設計図（class）から作成されるということです。
#また、同じ設計図から何棟も家を建てられるという意味において、classから沢山のobjectが作られることもあります。
#methodは、あるタスクを行うためにobjectに対して行うものということができます。家の例で考えると、来訪者が玄関に来た時にドアを自動的に開けるツールがmethod、と言えるでしょう。また、methodはfunction（関数）と言われることもあります。

欠損値の処理
#一番簡単な処理としてはdataごとその行を消してしまうことが挙げられる。もし消してしまうデータだ全体の1%以内であればそれで良いのではというざっくりの目安はある。
#値を補間する
・平均値
・最頻値
・中央値
-------------------------------------------------------------------------
from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values=np.nan, strategy='mean')
-------------------------------------------------------------------------
#imputerというオブジェクトを作成
#()の中身で初期値の設定
#missing_value=np.nan どの欠けている値を補間しますか？ということを指定。
今回
X = dataset.iloc[:, :-1].values
によって、numpy型に変換している。nan はnot a numberということ。
→numpy型に変換されたXのnumberでないものを補間の対象とするということ。
strategy='mean'
meanは平均のmean
-------------------------------------------------------------------------
imputer.fit(X[:,1:3])
-------------------------------------------------------------------------
#1:3は1の線と2の線に囲まれた領域即ち1と2の項目（今回の例でいえばAgeとSalary）を指している。
#fitは内部で計算をするメソッド
#transformは変換をするメソッド
-------------------------------------------------------------------------
X[:,1:3] = imputer.transform(X[:,1:3])
-------------------------------------------------------------------------
#transform imputerの内部で算出されたパラメータを反映させている。transform()の()内で対象とするデータを指定（今回はfitと同じ対象にするべき)。

カテゴリ変数の処理
エンコーディングとは。機械学習に使える形(数字)にしていく。
演算の対象として有効なものにするため。
・One-Hotエンコーディング データの数だけ列を作成。そして、分けた項目に該当すれば1、当てはまらなければ0という規則で設定。例えば、3種類の文字列項目があったら、3列に分解し、要素が0,1の行列になるイメージ。
#ちなみに、One-Hotベクトル、、、1つの成分が1でそのほか全てが0であるようなベクトル。One-Hotエンコーディングは、One-Hotなベクトルのテンソルを作っているイメージと言える。
・バイナリエンコーディング 2進数で表現

sklearnにて
列のデータを変換するclass + One-Hotエンコーディングclass
独立変数のエンコーディング
-------------------------------------------------------------------------
from sklearn.compose import ColumnTransformer #列の値を変換するclassをimport
from sklearn.preprocessing import OneHotEncoder #One-Hot encoderをimport
ct = ColumnTransformer(transformers=[('encorder',OneHotEncoder(), [0])] ,reminder='passthrough')
X = np.array(ct.fit_transform(X)) #fitとtransformを同時に行う。今回はX=としてX上書き
-------------------------------------------------------------------------
#列の値で変換する引数を指定。今回はその中でOne-Hot Encorderしたものを指定する。'encorder'という名前はテキトー、何でも良い。その右で、どんな形で変換していくかを指定する。今回はOne-HotEncorder。最後にどの列を変換するか。今回のデータでは、一番左の(だから[0]）Countryの項目を変換することを指している。
ColumnTransformer自体、列を変換するものであるから、行のindexは必要ない。
#ColumnTransformerの2つ目の引数→変換した列以外のデータをどうするか。reminder='passthrough'は変換した以外はそのままにすることを表している。
